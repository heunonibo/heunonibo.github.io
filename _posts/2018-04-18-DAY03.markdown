---
layout: post
title:  "리액트 컴포넌트 스타일링 기법"
date:   2018-04-18 15:46:00 +0900
categories: jekyll update
---

##### 이 포스팅은 'React로 구현하는 웹 애플리케이션 제작 CAMP 4기' 수업 내용으로 정리된 글입니다.

<br />

{% highlight css %}
.wrap .container .someting-box .event-box {
    width: 100px;
    height: 100px;
}
{% endhighlight %}

컴퍼넌트 상태를 다룰때 불변성을 지켜줘야 한다.
그래야 슈드컴포넌트 할 때 최적화를 할 수 있기 때문!

불변성 관리하기 위해 사용하는 라이브러리
* immutable.JS
* immer.js


리액트에서 DOM

컴포넌트에서 바로 ref 를 달아줄 수도 있다.

컴포넌트 내부에 있는 Ref 를 가져오고 싶을 때
{% highlight react %}
<RefSample innerRef={ref => this.input = ref;} />
{% endhighlight %}
innerRef 는 임의로 명칭한 것이다. 다른 네이밍으로 적어줘도 무방하다.


* node-sass 에 있는 option -> includePaths: [paths.styles]
* include-media 라이브러리
* React Icons (React Icon base)
* 리덕스 : 순차적으로 타고 들어가야 하는 것을 바로 데이터를 가져올수 있도록 하는 것.
* storyBook 컴포넌트를 시각화 하는 도구 : https://github.com/storybooks/storybook/tree/master/app/react
* CSS3 : Grid, Flex, rem, em
* react-svg-loader
* semantic UI / Bootstrap  -> CSS 프레임워크 : 용량이 컴
* Material


* components 폴더 구성을 자동으로 생성해주는 도구
https://marketplace.visualstudio.com/items?itemName=joshjg.generate-react-component
https://github.com/vlpt-playground/react-sass-component-template
https://react-blog-tutorial.vlpt.us/begin/02.html


```
function createPromise(value) {
  return new Promise(
      (resolve, reject) => {
        if (value === 4) {
          reject(new Error('some error'));
          return
        }
        setTimeout(() => { console.log('done!'); resolve(value + 1); }, 3000);
      }
    );
}

createPromise(3).then(createPromise).then(createPromise)
```


* Immutable.js
* Immer.js
*
